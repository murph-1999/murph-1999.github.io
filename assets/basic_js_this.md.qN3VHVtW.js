import{_ as s,o as i,c as a,a8 as t}from"./chunks/framework.Q0X2mdF-.js";const c=JSON.parse('{"title":"this 绑定","description":"","frontmatter":{},"headers":[],"relativePath":"basic/js/this.md","filePath":"basic/js/this.md","lastUpdated":null}'),n={name:"basic/js/this.md"},e=t(`<h1 id="this-绑定" tabindex="-1">this 绑定 <a class="header-anchor" href="#this-绑定" aria-label="Permalink to &quot;this 绑定&quot;">​</a></h1><h2 id="现在的水平应该写出来的内容不一样了-应该更有意义了-有实现案例了" tabindex="-1">现在的水平应该写出来的内容不一样了 应该更有意义了 有实现案例了 <a class="header-anchor" href="#现在的水平应该写出来的内容不一样了-应该更有意义了-有实现案例了" aria-label="Permalink to &quot;现在的水平应该写出来的内容不一样了 应该更有意义了 有实现案例了&quot;">​</a></h2><h1 id="node中的this和浏览器环境的this有什么不同" tabindex="-1">node中的this和浏览器环境的this有什么不同 <a class="header-anchor" href="#node中的this和浏览器环境的this有什么不同" aria-label="Permalink to &quot;node中的this和浏览器环境的this有什么不同&quot;">​</a></h1><p>在 <strong>Node.js</strong> 和 <strong>浏览器</strong> 环境中，<code>this</code> 的行为确实有所不同，主要受 <strong>运行环境</strong> 和 <strong>调用方式</strong> 影响。以下是它们的主要区别：</p><hr><h2 id="_1-全局作用域中的-this" tabindex="-1">1. <strong>全局作用域中的 <code>this</code></strong> <a class="header-anchor" href="#_1-全局作用域中的-this" aria-label="Permalink to &quot;1. **全局作用域中的 \`this\`**&quot;">​</a></h2><table tabindex="0"><thead><tr><th>环境</th><th><code>this</code> 的值</th></tr></thead><tbody><tr><td><strong>Node.js</strong></td><td><code>global</code>（在 ES 模块中是 <code>undefined</code>）</td></tr><tr><td><strong>浏览器</strong></td><td><code>window</code>（或 <code>globalThis</code>）</td></tr></tbody></table><h3 id="🌟-代码示例" tabindex="-1">🌟 代码示例： <a class="header-anchor" href="#🌟-代码示例" aria-label="Permalink to &quot;🌟 代码示例：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><strong>在浏览器中</strong>：输出 <code>window</code></li><li><strong>在 Node.js 中（CommonJS）</strong>：输出 <code>global</code></li><li><strong>在 Node.js 中（ES 模块）</strong>：输出 <code>undefined</code></li></ul><hr><h2 id="_2-模块作用域中的-this" tabindex="-1">2. <strong>模块作用域中的 <code>this</code></strong> <a class="header-anchor" href="#_2-模块作用域中的-this" aria-label="Permalink to &quot;2. **模块作用域中的 \`this\`**&quot;">​</a></h2><p>在 <strong>Node.js</strong> 中，每个文件都被视为一个 <strong>模块</strong>，而 <code>this</code> 在模块级作用域内不会指向 <code>global</code>，而是指向 <strong><code>module.exports</code></strong>。</p><h3 id="🌟-代码示例-1" tabindex="-1">🌟 代码示例： <a class="header-anchor" href="#🌟-代码示例-1" aria-label="Permalink to &quot;🌟 代码示例：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node.js 中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><p><strong>在浏览器中</strong>，JavaScript 文件中的 <code>this</code> 仍然是 <code>window</code>（除非是 ES 模块）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true （非 strict 模式）</span></span></code></pre></div><hr><h2 id="_3-函数作用域中的-this" tabindex="-1">3. <strong>函数作用域中的 <code>this</code></strong> <a class="header-anchor" href="#_3-函数作用域中的-this" aria-label="Permalink to &quot;3. **函数作用域中的 \`this\`**&quot;">​</a></h2><h3 id="✅-普通函数" tabindex="-1">✅ <strong>普通函数</strong> <a class="header-anchor" href="#✅-普通函数" aria-label="Permalink to &quot;✅ **普通函数**&quot;">​</a></h3><ul><li>在 <strong>Node.js</strong> 和 <strong>浏览器</strong> 的 <strong>非严格模式</strong> 下，<code>this</code> 指向 <strong>全局对象</strong>（<code>global</code> / <code>window</code>）。</li><li>在 <strong>严格模式（<code>use strict</code>）</strong> 下，<code>this</code> 是 <code>undefined</code>。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ul><li><strong>浏览器</strong>（非严格模式）→ <code>window</code></li><li><strong>浏览器</strong>（严格模式）→ <code>undefined</code></li><li><strong>Node.js</strong>（非严格模式）→ <code>global</code></li><li><strong>Node.js</strong>（严格模式）→ <code>undefined</code></li></ul><hr><h3 id="✅-对象方法" tabindex="-1">✅ <strong>对象方法</strong> <a class="header-anchor" href="#✅-对象方法" aria-label="Permalink to &quot;✅ **对象方法**&quot;">​</a></h3><p>在 <strong>Node.js 和浏览器</strong> 中，对象的方法 <code>this</code> 指向调用它的对象：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;test&quot;</span></span></code></pre></div><hr><h3 id="✅-箭头函数" tabindex="-1">✅ <strong>箭头函数</strong> <a class="header-anchor" href="#✅-箭头函数" aria-label="Permalink to &quot;✅ **箭头函数**&quot;">​</a></h3><p>箭头函数的 <code>this</code> 是 <strong>在定义时绑定的</strong>，不会因为调用方式不同而改变：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在浏览器和 Node.js 中都是 \`undefined\`（\`this\` 继承自外层作用域）</span></span></code></pre></div><hr><h2 id="_4-类和构造函数中的-this" tabindex="-1">4. <strong>类和构造函数中的 <code>this</code></strong> <a class="header-anchor" href="#_4-类和构造函数中的-this" aria-label="Permalink to &quot;4. **类和构造函数中的 \`this\`**&quot;">​</a></h2><p>在 <strong>Node.js 和浏览器</strong> 中，类和构造函数的 <code>this</code> 指向 <strong>新创建的实例</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alice</span></span></code></pre></div><p>但是在 <strong>Node.js REPL（交互式环境）</strong> 运行时，可能会有特殊情况，比如 <code>this</code> 可能是 <code>global</code>，而不是 <code>undefined</code>。</p><hr><h2 id="_5-settimeout-setinterval-中的-this" tabindex="-1">5. <strong>setTimeout / setInterval 中的 <code>this</code></strong> <a class="header-anchor" href="#_5-settimeout-setinterval-中的-this" aria-label="Permalink to &quot;5. **setTimeout / setInterval 中的 \`this\`**&quot;">​</a></h2><ul><li><strong>浏览器</strong>：<code>setTimeout</code> 和 <code>setInterval</code> 内部的 <code>this</code> 默认指向 <code>window</code>（非严格模式）。</li><li><strong>Node.js</strong>：<code>setTimeout</code> 和 <code>setInterval</code> 内部的 <code>this</code> 指向 <code>Timeout</code> 对象，而不是 <code>global</code>。</li></ul><h3 id="🌟-代码示例-2" tabindex="-1">🌟 代码示例： <a class="header-anchor" href="#🌟-代码示例-2" aria-label="Permalink to &quot;🌟 代码示例：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><strong>浏览器</strong>：<code>window</code></li><li><strong>Node.js</strong>：<code>Timeout</code>（即 <code>{ _idleTimeout, _onTimeout, ... }</code>）</li></ul><hr><h2 id="_6-eventemitter-中的-this-node-js-专有" tabindex="-1">6. <strong>EventEmitter 中的 <code>this</code>（Node.js 专有）</strong> <a class="header-anchor" href="#_6-eventemitter-中的-this-node-js-专有" aria-label="Permalink to &quot;6. **EventEmitter 中的 \`this\`（Node.js 专有）**&quot;">​</a></h2><p>在 Node.js 的 <code>EventEmitter</code> 事件监听器中，<code>this</code> 默认指向 <strong>触发事件的对象</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myEmitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;event&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myEmitter); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myEmitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;event&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>在浏览器的 <code>addEventListener</code> 中，普通函数的 <code>this</code> 指向 <strong>触发事件的 DOM 元素</strong>，而箭头函数的 <code>this</code> 指向 <strong>外层作用域</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;body&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Window（箭头函数继承外层作用域）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h2 id="_7-结论" tabindex="-1">7. <strong>结论</strong> <a class="header-anchor" href="#_7-结论" aria-label="Permalink to &quot;7. **结论**&quot;">​</a></h2><table tabindex="0"><thead><tr><th>场景</th><th>Node.js（CommonJS）</th><th>Node.js（ES 模块）</th><th>浏览器</th></tr></thead><tbody><tr><td><strong>全局作用域</strong></td><td><code>global</code></td><td><code>undefined</code></td><td><code>window</code></td></tr><tr><td><strong>模块作用域</strong></td><td><code>module.exports</code></td><td><code>undefined</code></td><td><code>window</code></td></tr><tr><td><strong>普通函数</strong>（非严格模式）</td><td><code>global</code></td><td><code>global</code></td><td><code>window</code></td></tr><tr><td><strong>普通函数</strong>（严格模式）</td><td><code>undefined</code></td><td><code>undefined</code></td><td><code>undefined</code></td></tr><tr><td><strong>对象方法</strong></td><td>调用对象</td><td>调用对象</td><td>调用对象</td></tr><tr><td><strong>箭头函数</strong></td><td>继承外层作用域</td><td>继承外层作用域</td><td>继承外层作用域</td></tr><tr><td><strong>类构造函数</strong></td><td>实例对象</td><td>实例对象</td><td>实例对象</td></tr><tr><td><strong>setTimeout</strong></td><td><code>Timeout</code></td><td><code>Timeout</code></td><td><code>window</code></td></tr><tr><td><strong>事件监听器</strong></td><td><code>EventEmitter</code></td><td><code>EventEmitter</code></td><td>触发事件的元素</td></tr></tbody></table><hr>`,52),h=[e];function l(d,k,p,o,r,E){return i(),a("div",{"data-pagefind-body":!0},h)}const y=s(n,[["render",l]]);export{c as __pageData,y as default};
