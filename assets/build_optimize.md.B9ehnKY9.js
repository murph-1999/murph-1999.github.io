import{_ as s,o as i,c as a,a8 as e}from"./chunks/framework.Q0X2mdF-.js";const n="/assets/dist.BpoWGb2y.png",l="/assets/dist-map.Dp0VyEz8.png",p="/assets/babel-loader.D1XlS107.png",t="/assets/babel-loader-opt.DTkxC5bi.png",h="/assets/caching.DibbRqnZ.png",k="/assets/filesystem.DWBxyud-.png",d="/assets/webpack-build.CnhG-KSc.png",c="/assets/vite-build.DHSR5Q1S.png",v=JSON.parse('{"title":"基于 Webpack 的构建速度优化","description":"","frontmatter":{},"headers":[],"relativePath":"build/optimize.md","filePath":"build/optimize.md","lastUpdated":null}'),o={name:"build/optimize.md"},r=e('<h1 id="基于-webpack-的构建速度优化" tabindex="-1">基于 Webpack 的构建速度优化 <a class="header-anchor" href="#基于-webpack-的构建速度优化" aria-label="Permalink to &quot;基于 Webpack 的构建速度优化&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>最近前后端项目放在一起使用 <code>maven</code> 打包，但是前端项目打包<code>npm run build</code>严重拖累整个项目打包效率，因此研究一下 <code>vue-cli</code> 构建优化。</p><p>项目技术栈：<code>vue-cli 5</code>、<code>Webpack 5</code> 、<code>vue 2.6</code>。</p><p>当前项目文件内容非常简单，只有一个页面及相应的业务文件，但是当前构建速度长达<code>75s+</code>，不过先不着急进行优化，先明确下几个问题以及对应的目标。</p><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><ol><li>当前构建为什么这么慢？</li><li>优化的目标是什么？</li><li>优化策略有哪些？</li><li>其他构建工具性能对比</li></ol><h2 id="原因分析及目标" tabindex="-1">原因分析及目标 <a class="header-anchor" href="#原因分析及目标" aria-label="Permalink to &quot;原因分析及目标&quot;">​</a></h2><p>当前项目文件非常简单，而构建速度已经惨不入目了，并且随着项目的增大，构建的效率会变得越来越慢。</p><blockquote><p>Webpack 的构建流程，主要时间花费在递归遍历各个入口文件，并基于入口文件不断寻找依赖逐个编译再递归处理的过程，每次递归都需要经历 String-&gt;AST-&gt;String 的流程，然后通过不同的 loader 处理一些字符串 或者执行一些 JavaScript 脚本，由于 NodeJS 单线程的特性以及语言本身的效率限制，Webpack 构建慢一直成为它饱受诟病的原因。</p></blockquote><h3 id="潜在原因" tabindex="-1">潜在原因 <a class="header-anchor" href="#潜在原因" aria-label="Permalink to &quot;潜在原因&quot;">​</a></h3><ol><li>项目打包体积是否过大，是否合理分配文件；</li><li><code>vue.config.js</code>是否存在耗时配置或优化余地；</li><li>未经过预处理或压缩的第三方库，导致<code>babel</code>过多转译；</li><li>未使用并行缓存</li></ol><h3 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h3><ol><li>打包体积尽可能小；</li><li>功能正常的情况下，尽可能优化构建速度</li></ol><p>接下来根据优化方向一步步测试性能。</p><h2 id="构建性能优化" tabindex="-1">构建性能优化 <a class="header-anchor" href="#构建性能优化" aria-label="Permalink to &quot;构建性能优化&quot;">​</a></h2><h3 id="查看dist文件" tabindex="-1">查看dist文件 <a class="header-anchor" href="#查看dist文件" aria-label="Permalink to &quot;查看dist文件&quot;">​</a></h3><p>首先查看打包后的<code>dist</code>文件是否合理，是否存在文件过大的情况。</p><p><img src="'+n+'" alt="image.png"><br></p><p>并无异常，<code>chunk-elementUI</code>和<code>chunk-libs</code>是执行分包策略后的产物。</p><p>一般情况下可以使用<code>webpack-bundle-analyzer来</code>分析项目的构建结果，以识别过大的模块、重复的依赖和不必要的代码，可自行尝试。</p><p>但是查看<code>dist</code>文件夹时，我发现输出了<code>map</code>文件。</p><p><img src="'+l+`" alt="image.png"><br></p><p>该项目并不需要在生产环境中开启<code>source-map</code>，因此根据<a href="https://cli.vuejs.org/config/#productionsourcemap" target="_blank" rel="noreferrer">https://cli.vuejs.org/config/#productionsourcemap</a> 关闭<code>source-map</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">productionSourceMap:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><blockquote><p>Setting this to <code>false</code> can speed up production builds if you don&#39;t need source maps for production.</p></blockquote><p>去除后再次打包，减少了1-2s左右，收敛微弱，需要进一步优化。</p><h3 id="合理配置路径解析" tabindex="-1">合理配置路径解析 <a class="header-anchor" href="#合理配置路径解析" aria-label="Permalink to &quot;合理配置路径解析&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	extensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.scss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>webpack</code> 会按照配置的扩展名顺序依次查找文件，将最常用的扩展名放在前面，可以减少不必要的查找，相较于<code>json</code>文件项目中<code>.scss</code>文件创建的更多，因此改良后的解析顺序为：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	extensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.scss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>再次打包，同样减少了1-2s左右，需要进一步通过查看耗时进行优化。</p><h2 id="查看耗时" tabindex="-1">查看耗时 <a class="header-anchor" href="#查看耗时" aria-label="Permalink to &quot;查看耗时&quot;">​</a></h2><p>使用<code>SpeedMeasurePlugin</code>插件来看一下项目的构建过程中各个阶段的耗时情况。</p><blockquote><p><code>speed-measure-webpack-plugin</code> 是一款统计 webpack 打包时间的插件，不仅可以分析总的打包时间，还能分析各阶段<code>loader</code>的耗时，并且可以输出一个文件用于永久化存储数据。</p></blockquote><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 安装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install speed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">measure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webpack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span></code></pre></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SpeedMeasurePlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;speed-measure-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> smp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpeedMeasurePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  configureWebpack: smp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里配置原本的Webpack配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 可以定义entry、output、module等配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><img src="`+p+`" alt="image.png"><br></p><p>可以看出主要的<code>loader</code>耗时是<code>babel-loader</code>。</p><h3 id="babel-loader" tabindex="-1">babel-loader <a class="header-anchor" href="#babel-loader" aria-label="Permalink to &quot;babel-loader&quot;">​</a></h3><p><code>babel-loader</code> 是具体负责转译 <code>JavaScript</code> 文件的加载器，它通过 <code>Babel</code> 来将现代 <code>JavaScript</code> 转换为旧版本浏览器支持的代码。但是当前项目中<code>babel</code>也处理了第三方库代码，因此尝试排除<code>node-modules</code>文件。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.exclude.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>此时<code>babel-loader</code>耗时已减少了一半。</p><p><img src="`+t+`" alt="image.png"><br></p><p>注意，在很多优化策略中给出<code>babel-loader</code>需要再加上<code>cache-loader</code>处理进行缓存以及<code>thread-loader</code>并行处理，配置如下：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;os&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.exclude.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;thread-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;thread-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		workers: os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cpus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 用CPU核心数量减1的线程数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		 options.cacheDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		 return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span></code></pre></div><p>但是亲测后效果并不明显，查询<code>vue-cli V4</code>升级到<code>V5</code>说明后才发现<code> vue-cli V5</code>已经去除<code>cache-loader</code>。 <a href="https://cli.vuejs.org/migrations/migrate-from-v4.html#vue-cli-service" target="_blank" rel="noreferrer">Migrate-from-v4</a>。</p><p>继续查看文档，我发现<code>caching</code>和<code>Parallelization</code>功能已默认开启： <img src="`+h+`" alt="image.png"><br></p><h3 id="transpiledependencies" tabindex="-1">transpileDependencies <a class="header-anchor" href="#transpiledependencies" aria-label="Permalink to &quot;transpileDependencies&quot;">​</a></h3><p>在查询<code>vue-cli</code>文档时，我查看到一个和<code>babel-loader</code>相关的属性<code>transpileDependencies</code>： <a href="https://cli.vuejs.org/zh/config/#transpiledependencies" target="_blank" rel="noreferrer">transpileDependencies</a></p><blockquote><p>默认情况下 babel-loader 会忽略所有 node_modules 中的文件。你可以启用本选项，以避免构建后的代码中出现未转译的第三方依赖。 不过，对所有的依赖都进行转译可能会降低构建速度。如果对构建性能有所顾虑，你可以只转译部分特定的依赖：给本选项传一个数组，列出需要转译的第三方包包名或正则表达式即可。 检查<code>vue.config.js</code>文档后，果然设置成了<code>true</code>，暂时修改为<code>false</code>后再次构建：</p></blockquote><p>那么<code>transpileDependencies</code>直接设置为<code>false</code>会有什么影响吗？怎么检查一些库需要经过<code>babel</code>转换呢？ 这里就涉及到<code>babel</code>转译的细节了，另一篇文章将详细介绍。</p><h3 id="文件系统缓存" tabindex="-1">文件系统缓存 <a class="header-anchor" href="#文件系统缓存" aria-label="Permalink to &quot;文件系统缓存&quot;">​</a></h3><p>除了优先查看<code>Vue-cli</code>配置，还应该查看更为直接的<code>Webpack</code>配置。<code>Webpack 5</code> 引入了内置的持久化缓存功能<a href="https://webpack.docschina.org/configuration/cache#cache" target="_blank" rel="noreferrer">cache</a>，能够直接在磁盘或内存中缓存编译结果。这比 <code>cache-loader</code> 更高效，因为 <code>cache-loader</code> 只能在特定的<code>loader</code>链中使用，而 <code>Webpack 5 </code>的缓存是全局的，能够覆盖整个构建过程，包括 <code>loader</code>、模块解析、以及其他构建步骤。其次需要注明的一点是社区提供 <code>HardSourceWebpackPlugin</code> 实现持久化缓存，<code>Webpack 5</code>是对这功能进行官方支持与优化，所以在一些解决方案中提到<code>HardSourceWebpackPlugin</code>，确认下是否低于<code>Webpack 5</code>。配置如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: smp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cache: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;filesystem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用文件系统缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cacheDirectory: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules/.cache/webpack&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选：自定义缓存目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      buildDependencies: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        config: [__filename], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当配置文件改变时，缓存失效，webpack推荐写法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="builddependencies" tabindex="-1">buildDependencies <a class="header-anchor" href="#builddependencies" aria-label="Permalink to &quot;buildDependencies&quot;">​</a></h4><p><code>cache.buildDependencies</code> 是一个针对构建的额外代码依赖的数组对象。<code>webpack </code>将使用这些项和所有依赖项的哈希值来使文件系统缓存失效。</p><blockquote><p>默认是 <code>webpack/lib</code> 来获取 <code>webpack</code> 的所有依赖项。 推荐在 <code>webpack</code> 配置中设置 <code>cache.buildDependencies.config: [__filename]</code>来获取最新配置以及所有依赖项。</p></blockquote><h4 id="cachedirectory" tabindex="-1">cacheDirectory <a class="header-anchor" href="#cachedirectory" aria-label="Permalink to &quot;cacheDirectory&quot;">​</a></h4><p>缓存目录，仅当 <code>cache.type</code> 被设置成 <code>filesystem</code> 才可用。</p><p>测试发现，使用<code>filesystem</code>缓存后冷启动耗时较长，但是未修改任何文件再次打包只需要<code>5s</code>。 <img src="`+k+'" alt="image.png"><br> 但是切记不要无脑使用<code>fileSystem</code>，因为可能会遇到缓存不一致、缓存文件过大、磁盘 I/O 性能影响、缓存管理复杂等问题，需要配合解决。本文重点在于提升构建速度，正常上生产可能会踩坑。</p><h2 id="其他构建工具" tabindex="-1">其他构建工具 <a class="header-anchor" href="#其他构建工具" aria-label="Permalink to &quot;其他构建工具&quot;">​</a></h2><p>基于<code>Webpack</code>的一些问题，如果实在没有优化空间，我们还可以在衡量可行性的情况下转换构建工具，比如<code>Vite</code>。 <code>Vite</code>有两个优点：</p><ol><li>项目冷启动更快</li><li>热更新更快</li></ol><p>主要介绍下<code>Vite</code> 我们先来看看 <code>Webpack</code> 与 <code>Vite</code> 的在构建上的区别。下图是 <code>Webpack</code> 的遍历递归收集依赖的过程： <img src="'+d+'" alt=""><br></p><p><code>Webpack </code>启动时，从入口文件出发，调用所有配置的 <code>Loader</code> 对模块进行编译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理，一系列的递归操作非常耗时。 再看下<code>Vite</code>： <img src="'+c+'" alt=""><br><code>Vite</code> 通过在一开始将应用中的模块区分为 依赖 和 源码 两类，改进了开发服务器启动时间。它快的核心在于两点：</p><ol><li><p>使用 <code>Go</code> 语言的依赖预构建：<code>Vite</code> 将会使用 <code>esbuild</code> 进行预构建依赖。<code>esbuild</code> 使用 <code>Go</code> 编写，并且比以 <code>JavaScript</code> 编写的打包器预构建依赖快 10-100 倍。依赖预构建主要做了什么呢？</p><ul><li>开发阶段中，<code>Vite</code> 的开发服务器将所有代码视为原生<code> ES</code> 模块。因此，<code>Vite</code> 必须先将作为<code>CommonJS</code>或 <code>UMD</code> 发布的依赖项转换为 <code>ESM</code></li><li>Vite 将有许多内部模块的 <code>ESM</code> 依赖关系转换为单个模块，以提高后续页面加载性能。如果不编译，每个依赖包里面都可能含有多个其他的依赖，每个引入的依赖都会又一个请求，请求多了耗时就多;</li></ul></li><li><p>按需编译返回：<code>Vite</code> 以 原生 <code>ESM</code> 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：<code>Vite</code> 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>回答上面的几个问题</p><ol><li>通过分析用时发现 <code>babel-loader</code> 比较耗时；</li><li>Webpack 的构建流程主要时间花费在递归遍历各个入口文件，因此替换构建工具也是一个优化方向，比如<code>vite</code></li><li>优化的难点主要在于对配置文件不太熟悉，不知道<code>vue-cli 5</code>已做了哪些优化，也不知道<code>Webpack</code>可以做到哪些优化，这反而是需要积累的经验。如果是使用<code>vue-cli</code>创建的项目，优先查询<code>vue-cli</code>文档配置以及默认配置。</li></ol>',70),E=[r];function g(y,b,F,u,m,C){return i(),a("div",{"data-pagefind-body":!0},E)}const D=s(o,[["render",g]]);export{v as __pageData,D as default};
