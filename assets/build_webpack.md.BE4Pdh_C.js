import{_ as s,o as i,c as a,a8 as l}from"./chunks/framework.Q0X2mdF-.js";const n="/assets/webpack-loader.Bas_-xbE.png",y=JSON.parse('{"title":"Webpack basic","description":"","frontmatter":{},"headers":[],"relativePath":"build/webpack.md","filePath":"build/webpack.md","lastUpdated":null}'),t={name:"build/webpack.md"},e=l(`<h1 id="webpack-basic" tabindex="-1">Webpack basic <a class="header-anchor" href="#webpack-basic" aria-label="Permalink to &quot;Webpack basic&quot;">​</a></h1><h2 id="现代web开发的问题" tabindex="-1">现代web开发的问题 <a class="header-anchor" href="#现代web开发的问题" aria-label="Permalink to &quot;现代web开发的问题&quot;">​</a></h2><ol><li>不同浏览器对模块化的支持不一样，模块化本身有不同的设计规范</li><li>开发过程中为了提高效率，比如使用一些新特性如ts，sass，但是浏览器是不能直接识别这些资源的</li><li>实时监听开发过程使用热更新</li><li>项目结果打包压缩优化</li></ol><p>webpack就是解决这样的事情，让开发者不关心过程，但是结果一定是可以在浏览器正常运行的代码。</p><h2 id="webpack功能" tabindex="-1">webpack功能 <a class="header-anchor" href="#webpack功能" aria-label="Permalink to &quot;webpack功能&quot;">​</a></h2><p>为现代js应用提供静态模块打包</p><ol><li>将不同类型资源按模块处理进行打包</li><li>静态：打包后最终产出静态资源</li><li>webpack支持不同规范的模块化开发（怎么解决的不同语法问题，比如es6和commonjs）</li></ol><p>使用一句话来描述！！webpack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p><h2 id="webpack和其他打包工具的对比" tabindex="-1">webpack和其他打包工具的对比 <a class="header-anchor" href="#webpack和其他打包工具的对比" aria-label="Permalink to &quot;webpack和其他打包工具的对比&quot;">​</a></h2><ol><li>rollup：只是提供一个充分利用esm各项特性的高效打包器，构建出结构扁平，性能出众的类库。 而且tree-shaking是rollup提出的，这是因为rollup只处理esm，esm所有的依赖都是确定的，能够对代码进行静态分析。不需要依靠运行时去确定依赖关系，在构建一些lib的时候可以选择rollup, 而在构建一些应用的时候，选择webpack。</li><li>Vite：基于原生 ESM，冷启动快（无需打包）。</li></ol><h2 id="核心组成" tabindex="-1">核心组成 <a class="header-anchor" href="#核心组成" aria-label="Permalink to &quot;核心组成&quot;">​</a></h2><ol><li>entry，以起点打包，可抽象成输入</li><li>module：模块，webpack中一切皆为模块，一个模块对应着一个文件，webpack会从配置的entry开始递归找到所有依赖的模块</li><li>chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</li><li>loader： 识别非js文件，因为 webpack只能理解 js 和 json 文件，loader 能将他们转换为有效模块</li><li>plugin：打包的优化和压缩，一些扩展插件，解决loader无法完成的事情</li><li>output：打包后的资源 bundle输出，告诉webpack在哪里输出所创建的bundle</li></ol><h2 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h2><p>loader属性如下：</p><ul><li>test 属性，识别出哪些文件会被转换。</li><li>use 属性，定义出在进行转换时，应该使用哪个 loader。</li></ul><h3 id="postcss-loader" tabindex="-1">postcss-loader <a class="header-anchor" href="#postcss-loader" aria-label="Permalink to &quot;postcss-loader&quot;">​</a></h3><p>这个<code>loader</code>是使用js转换样式的工具，它根据兼容性，来附加css样式，比如添加前缀webkit-等等。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loader:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;postcss-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    options:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      postcssOptions:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        plugins:[</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;autoprefixer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>以下是关于 <strong>style-loader</strong>、<strong>css-loader</strong> 和 <strong>postcss-loader</strong> 的作用、联系与协作流程的详细解析，结合 Webpack 工作流和实践场景：</p><hr><h4 id="核心作用对比" tabindex="-1">核心作用对比 <a class="header-anchor" href="#核心作用对比" aria-label="Permalink to &quot;核心作用对比&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Loader</th><th>核心作用</th><th>典型场景</th></tr></thead><tbody><tr><td><strong>style-loader</strong></td><td>将 CSS 注入 DOM（通过 <code>&lt;style&gt;</code> 标签或 CSSOM API）</td><td>开发环境，实现 CSS 热更新（HMR）</td></tr><tr><td><strong>css-loader</strong></td><td>解析 CSS 文件中的 <code>@import</code> 和 <code>url()</code> 依赖，支持 CSS 模块化（CSS Modules）</td><td>处理 CSS 依赖关系，生成模块化类名</td></tr><tr><td><strong>postcss-loader</strong></td><td>通过 PostCSS 插件处理 CSS（如添加前缀、压缩、转换新语法）</td><td>兼容性处理、代码优化、未来 CSS 语法转换</td></tr></tbody></table><hr><h4 id="协作流程与执行顺序" tabindex="-1">协作流程与执行顺序 <a class="header-anchor" href="#协作流程与执行顺序" aria-label="Permalink to &quot;协作流程与执行顺序&quot;">​</a></h4><p>在 Webpack 中，这三个 Loader <strong>协同处理 CSS 文件</strong>，执行顺序为： <strong><code>postcss-loader</code> → <code>css-loader</code> → <code>style-loader</code></strong> （注意：Loader <strong>从右向左</strong>执行，配置时需倒序书写）</p><h4 id="处理流程示例" tabindex="-1">处理流程示例： <a class="header-anchor" href="#处理流程示例" aria-label="Permalink to &quot;处理流程示例：&quot;">​</a></h4><p>假设处理一个包含 <code>@import</code> 和 CSS 嵌套语法的文件 <code>app.css</code>：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* app.css */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./reset.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &amp; .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li><p><strong>postcss-loader</strong></p><ul><li>使用 <code>Autoprefixer</code> 添加浏览器前缀。</li><li>使用 <code>postcss-preset-env</code> 转换嵌套语法。</li><li><strong>输出</strong>：<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-webkit-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-ms-flexbox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span></code></pre></div></li></ul></li><li><p><strong>css-loader</strong></p><ul><li>解析 <code>@import &quot;./reset.css&quot;</code>，将其内容合并到当前文件。</li><li>若启用 CSS Modules，生成哈希类名（如 <code>.container_1x2y3z</code>）。</li><li><strong>输出</strong>：包含所有依赖的 CSS 内容 + 模块映射表（用于 JS 导入）。</li></ul></li><li><p><strong>style-loader</strong></p><ul><li>将最终 CSS 代码注入到 HTML 的 <code>&lt;style&gt;</code> 标签中。</li><li>开发环境下支持 HMR（修改 CSS 后自动更新样式）。</li></ul></li></ol><hr><h3 id="file-loader-和-url-loader" tabindex="-1">file-loader 和 url-loader <a class="header-anchor" href="#file-loader-和-url-loader" aria-label="Permalink to &quot;file-loader 和 url-loader&quot;">​</a></h3><p>当初在做qiankun嵌入时遇到一个问题的，element-ui找不到图标路径，体会到大文件不适合转为base64后内联，因为可能影响首屏加载速度 以下是关于 <strong>file-loader</strong> 和 <strong>url-loader</strong> 的核心作用、区别及实践场景的总结，结合 Webpack 工作流和性能优化策略：</p><hr><p>一、主要区别</p><table tabindex="0"><thead><tr><th>Loader</th><th>核心作用</th><th>关键特性</th></tr></thead><tbody><tr><td><strong>file-loader</strong></td><td>处理文件（图片、字体等），将其复制到输出目录，并返回文件路径的公共 URL</td><td>直接输出文件，不修改内容</td></tr><tr><td><strong>url-loader</strong></td><td>基于文件大小阈值，将小文件转换为 Base64 内联 URL，大文件回退到 file-loader</td><td>减少 HTTP 请求，小文件内联优化</td></tr></tbody></table><p><strong>联系</strong>：</p><ul><li><code>url-loader</code> 是 <code>file-loader</code> 的增强版，二者通常配合使用。</li><li>当文件体积小于指定阈值时，<code>url-loader</code> 将文件转换为 Base64 URL；超过阈值时，自动调用 <code>file-loader</code> 输出文件。</li></ul><hr><p>二、基础配置</p><ol><li><strong>file-loader 基础配置</strong></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jpe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">gif</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name].[hash:8].[ext]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出文件名格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              outputPath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;images/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              publicPath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/dist/images/&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 公共访问路径（CDN 场景需配置）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>效果</strong>：</p><ul><li>输入文件 <code>logo.png</code> → 输出为 <code>/dist/images/logo.a1b2c3d4.png</code></li><li>在 JS/CSS 中引用时返回该路径：<code>url(&#39;/dist/images/logo.a1b2c3d4.png&#39;)</code></li></ul><hr><ol><li><strong>url-loader 配置（含回退机制）</strong></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jpe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">gif</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              limit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8192</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 小于 8KB 的文件转为 Base64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name].[hash:8].[ext]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              outputPath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;images/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              fallback: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file-loader&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 超过 limit 时使用 file-loader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>效果</strong>：</p><ul><li>若文件 <code>icon.png</code>（5KB）→ 转换为 Base64 字符串：<code>url(&#39;data:image/png;base64,...&#39;)</code></li><li>若文件 <code>banner.jpg</code>（12KB）→ 回退到 <code>file-loader</code>，输出为 <code>/dist/images/banner.a1b2c3d4.jpg</code></li></ul><hr><p>三、应用场景对比</p><table tabindex="0"><thead><tr><th>场景</th><th>推荐 Loader</th><th>原因</th></tr></thead><tbody><tr><td><strong>小图标（&lt; 10KB）</strong></td><td>url-loader</td><td>内联 Base64 减少 HTTP 请求，提升加载速度</td></tr><tr><td><strong>大图/高清图（&gt; 10KB）</strong></td><td>file-loader</td><td>避免 Base64 体积膨胀（Base64 体积比原文件大 ~33%）</td></tr><tr><td><strong>字体文件</strong></td><td>file-loader</td><td>字体文件通常较大，直接输出文件更合理</td></tr><tr><td><strong>需要按需加载的图片</strong></td><td>file-loader</td><td>结合懒加载技术（如 <code>loading=&quot;lazy&quot;</code>），延迟加载非关键图片</td></tr></tbody></table><hr><p>四、性能优化注意事项</p><ol><li><p><strong>合理设置 <code>limit</code> 阈值</strong></p><ul><li><strong>推荐值</strong>：8KB~12KB（根据项目需求调整）。</li><li><strong>权衡点</strong>：Base64 内联虽减少请求，但增加 HTML/CSS/JS 文件体积，可能影响首次加载速度。</li></ul></li><li><p><strong>文件名哈希处理</strong></p><ul><li>使用 <code>[hash]</code> 或 <code>[contenthash]</code> 生成唯一文件名，利用浏览器缓存（代码不变时文件名不变）。</li></ul></li><li><p><strong>CDN 路径配置</strong></p><ul><li>通过 <code>publicPath</code> 指定资源在 CDN 上的绝对路径：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  publicPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://cdn.example.com/assets/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CDN 地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  outputPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;images/&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 本地输出目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ol><hr><p>五、与其他 Loader 的协作</p><ol><li><p><strong>与 <code>html-loader</code> 配合</strong> 处理 HTML 中 <code>&lt;img&gt;</code> 标签引用的图片：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析 HTML 中的图片路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>与 <code>css-loader</code> 配合</strong> 处理 CSS 中的 <code>url()</code> 引用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;postcss-loader&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><hr><p>六、常见问题与解决方案</p><ol><li><strong>图片路径错误（404）</strong></li></ol><ul><li><strong>原因</strong>：<code>publicPath</code> 配置错误或输出路径未对齐。</li><li><strong>解决</strong>：检查 <code>outputPath</code> 和 <code>publicPath</code> 是否匹配实际部署路径。</li></ul><ol start="2"><li><strong>Base64 内联导致 CSS 文件过大</strong></li></ol><ul><li><strong>现象</strong>：CSS 文件体积膨胀，影响首屏加载。</li><li><strong>解决</strong>：调大 <code>url-loader</code> 的 <code>limit</code> 值，减少内联文件数量。</li></ul><ol start="3"><li><strong>字体文件未正确加载</strong></li></ol><ul><li><strong>原因</strong>：未正确配置字体文件的 loader 规则。</li><li><strong>解决</strong>：为字体文件单独配置 <code>file-loader</code>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(woff2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">eot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ttf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">otf)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    options: { outputPath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fonts/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><hr><p>七、Webpack 5 内置资源模块 Webpack 5 提供了 <strong>Asset Modules</strong>，无需额外安装 <code>file-loader</code> 或 <code>url-loader</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Webpack 5 配置（替代 url-loader/file-loader）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jpe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">gif</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;asset&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dataUrlCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      maxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8192</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 8KB 以下内联</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  generator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;images/[name].[hash:8][ext]&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><p>总结</p><ul><li><strong>选型策略</strong>： <ul><li><strong>优先 <code>url-loader</code></strong>：适用于小文件内联优化。</li><li><strong>回退 <code>file-loader</code></strong>：处理大文件或需要单独加载的资源。</li></ul></li><li><strong>性能平衡</strong>：根据项目类型（如移动端优先减少请求、PC 端关注缓存）调整 <code>limit</code> 值。</li><li><strong>现代替代</strong>：Webpack 5 的 Asset Modules 简化了配置，建议新项目直接使用。</li></ul><h2 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;plugin&quot;">​</a></h2><p>loader 是用来转换类型，使用的时机是读取资源内容时 plugin 可以在打包的流水线中插入一些操作，比如每次新打包的时候，清空原来的dist目录，打包时css的压缩等等。 补充：plugin本质上就是一个类！ <img src="`+n+'" alt="image.png"><br> 还有很多其他场景：比如使用插件来实现目录拷贝，开发构建过程中measure构建速度</p><h2 id="其他常见配置" tabindex="-1">其他常见配置 <a class="header-anchor" href="#其他常见配置" aria-label="Permalink to &quot;其他常见配置&quot;">​</a></h2><h3 id="babel" tabindex="-1">babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;babel&quot;">​</a></h3><p>浏览器默认是不能识别像jsx ts es6的语法。因此babel将他们转化为浏览器能识别的内容，但是只有babel/core和babel/loader还不够，需要有额外的工具，比如将箭头函数转换为普通函数时，所以还可以配置很多预设。</p><h3 id="polyfill" tabindex="-1">polyfill <a class="header-anchor" href="#polyfill" aria-label="Permalink to &quot;polyfill&quot;">​</a></h3><p>在webpack4中polyfill是默认打包进去的，而在5当中是可选的（为了优化打包速度），比如说有些浏览器不支持promise</p><h3 id="热更新" tabindex="-1">热更新 <a class="header-anchor" href="#热更新" aria-label="Permalink to &quot;热更新&quot;">​</a></h3><p>更快模块热更新，一个模块有变更，不会影响到其他模块</p><h3 id="resolve模块解析" tabindex="-1">resolve模块解析 <a class="header-anchor" href="#resolve模块解析" aria-label="Permalink to &quot;resolve模块解析&quot;">​</a></h3><p>webpack中的模块解析分为几类，</p><ol><li>绝对路径</li><li>相对路径</li><li>模块名，直接去node_modules下面去查找</li></ol><p>还有文件类型，文件还是文件夹，是文件的话要看扩展名，如果没有加扩展名，会默认进行补全，通过extension来配置</p><h3 id="runtimechunk" tabindex="-1">runtimeChunk <a class="header-anchor" href="#runtimechunk" aria-label="Permalink to &quot;runtimeChunk&quot;">​</a></h3><h3 id="source-map" tabindex="-1">source-map <a class="header-anchor" href="#source-map" aria-label="Permalink to &quot;source-map&quot;">​</a></h3><p>为什么使用它，映射的技术，转换后的代码-》源代码 调试时可以定位到源代码中的信息 分环境来配置，vue就是sourcemap 信息默认就是最全的 测试阶段 cheap-module-source-map</p><h3 id="dll" tabindex="-1">dll <a class="header-anchor" href="#dll" aria-label="Permalink to &quot;dll&quot;">​</a></h3><p>目的是打包的时候不再重新打包。 比如vue，react包的更新并不频繁，打包的时候不需要重新打包，因此生成一个动态链接库，访问资源的时候直接访问链接库。</p><h3 id="terser" tabindex="-1">terser <a class="header-anchor" href="#terser" aria-label="Permalink to &quot;terser&quot;">​</a></h3><p>对 js 代码进行处理（简化或者丑化，比如create-》c）</p><h3 id="scope-hoisting" tabindex="-1">scope hoisting <a class="header-anchor" href="#scope-hoisting" aria-label="Permalink to &quot;scope hoisting&quot;">​</a></h3><p>作用域提升，优化打包速度 做静态分析，判断是否能提升，可以优化查询速度，减小代码体积 底层依赖于es module，这就是开发时要遵循某个规范的原因 在生产模式中，是默认使用的</p><h3 id="tree-shaking" tabindex="-1">tree-shaking <a class="header-anchor" href="#tree-shaking" aria-label="Permalink to &quot;tree-shaking&quot;">​</a></h3><p>tree-shaking就是去除掉并未使用掉的模块的代码，减小打包体积 首先要明确的一点是commonjs不适合使用tree-shaking，</p><h3 id="webpack和gulp" tabindex="-1">webpack和gulp <a class="header-anchor" href="#webpack和gulp" aria-label="Permalink to &quot;webpack和gulp&quot;">​</a></h3><p>Webpack 已覆盖 80% 的 Gulp 场景：通过插件和 Loader 可高效处理资源压缩、合并、哈希等任务。 Gulp 退居边缘场景：仅用于复杂文件流、跨技术栈任务或遗留系统维护。</p><h1 id="webpack4" tabindex="-1">webpack4 <a class="header-anchor" href="#webpack4" aria-label="Permalink to &quot;webpack4&quot;">​</a></h1><h1 id="webpack5" tabindex="-1">webpack5 <a class="header-anchor" href="#webpack5" aria-label="Permalink to &quot;webpack5&quot;">​</a></h1><h1 id="优化相关" tabindex="-1">优化相关 <a class="header-anchor" href="#优化相关" aria-label="Permalink to &quot;优化相关&quot;">​</a></h1><h2 id="配置优化" tabindex="-1">配置优化 <a class="header-anchor" href="#配置优化" aria-label="Permalink to &quot;配置优化&quot;">​</a></h2><p>基础类库分包</p><h2 id="打包构建优化" tabindex="-1">打包构建优化 <a class="header-anchor" href="#打包构建优化" aria-label="Permalink to &quot;打包构建优化&quot;">​</a></h2><ol><li>多线程</li><li>文件系统缓存 <a href="https://juejin.cn/post/7148366005301952525" target="_blank" rel="noreferrer">https://juejin.cn/post/7148366005301952525</a></li></ol>',104),h=[e];function p(k,r,d,o,E,g){return i(),a("div",{"data-pagefind-body":!0},h)}const F=s(t,[["render",p]]);export{y as __pageData,F as default};
