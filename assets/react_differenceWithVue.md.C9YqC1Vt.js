import{_ as e,o as t,c as a,a8 as p}from"./chunks/framework.Q0X2mdF-.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"react/differenceWithVue.md","filePath":"react/differenceWithVue.md","lastUpdated":null}'),c={name:"react/differenceWithVue.md"},r=p('<p>vue 和 react的区别 相同点 ● 都使用 Virtual DOM ● 提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。 ● 将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</p><p>不同点 ● 在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树。而组件的依赖是在渲染过程中自动追踪的，所以系统能精确知晓哪个组件确实需要被重渲染。需要借助于PureComponent 不可变性最主要的优势在于它可以帮助我们在 React 中创建 pure components。我们可以很轻松的确定不可变数据是否发生了改变，从而确定何时对组件进行重新渲染。</p><p>● 在react中，一切都是js，html和css都可以纳入到css中处理 ● 组件作用域中的css：CSS 作用域在 React 中是通过 CSS-in-JS 的方案实现的 (比如 styled-components 和 emotion)。vue中通过style标签来实现 ● react的生态系统更大丰富一点 ● 每个Vue实例都实现了事件接口，方便父子组件通信，小型项目中不需要引入状态管理机制，而react必需自己实现； ● vue多了指令系统，让模版可以实现更丰富的功能，而React只能使用JSX语法； ● Vue增加的语法糖computed和watch，而在React中需要自己写一套逻辑来实现；</p><p>react中的单向数据流是什么意思？和vue有区别吗？ 都是数据不可变</p><p>事件处理问题？写法与性能之间的关系<a href="https://react.docschina.org/docs/handling-events.html" target="_blank" rel="noreferrer">https://react.docschina.org/docs/handling-events.html</a></p><p>key值为什么是必须的，以及key值为什么不建议取索引 一个好的经验法则是：在 map() 方法中的元素需要设置 key 属性。</p><p>state最关键的一点是： 然后，如果其他组件也需要这个 state，那么你可以将它提升至这些组件的最近共同父组件中。你应当依靠自上而下的数据流，而不是尝试在不同组件间同步 state。</p><p>相比于双向绑定：</p><ol><li>提升 state 方式 比双向绑定方式需要编写更多的样板代码，但好处是方便排查bug，只能在自己的组件中修改state</li><li>如果某些数据可以由props或者state推导得出，那么它就不应该存在于state中。</li></ol><p>react中的组合模式。react代码重用推荐使用组合而非继承。</p><p>插槽的概念 react中是没有的 这种方法可能使你想起别的库中“槽”（slot）的概念，但在 React 中没有“槽”这一概念的限制，你可以将任何东西作为 props 进行传递。</p><p>为什么没有使用继承？ 在 Facebook，我们在成百上千个组件中使用 React。我们并没有发现需要使用继承来构建组件层次的情况。 Props 和组合为你提供了清晰而安全地定制组件外观和行为的灵活方式。注意：组件可以接受任意 props，包括基本数据类型，React 元素以及函数。 如果你想要在组件间复用非 UI 的功能，我们建议将其提取为一个单独的 JavaScript 模块，如函数、对象或者类。组件可以直接引入（import）而无需通过 extend 继承它们。</p><p>组件编写顺序 当你的应用比较简单时，使用自上而下的方式更方便；对于较为大型的项目来说，自下而上地构建，并同时为低层组件编写测试是更加简单的方式。 React 单向数据流（也叫单向绑定）的思想使得组件模块化，易于快速开发。</p><p>两个react项目学习！</p><p>创建项目： npx create-react-app [projectName]</p><p>Tip</p><ol><li>先构建一个静态应用程序，然后再添加数据交互（数据交互需要非常多的思考）</li><li>计算出你应用程序需要的绝对精简 state 表示，按需计算其它一切</li></ol><p>新概念： 声明式UI编程：声明式UI编程和命令式UI编程的区别</p><p>react实现ui的方式</p><ol><li>定位你的组件中不同的视图状态</li><li>确定是什么触发了这些 state 的改变</li><li>表示内存中的 state（需要使用 useState）, state是变化的，一定要遵循尽可能地少</li><li>删除任何不必要的 state 变量</li><li>连接事件处理函数去设置 state</li></ol><p>学习react的最好方式是将其作为框架来学习，但也不能忽略其基础知识</p><p>context 是不能滥用 过度使用的！只是在合适的场景使用</p>',22),s=[r];function o(i,l,n,d,_,u){return t(),a("div",{"data-pagefind-body":!0},s)}const f=e(c,[["render",o]]);export{m as __pageData,f as default};
