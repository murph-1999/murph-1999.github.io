import{_ as e,o as a,c as i,a8 as o}from"./chunks/framework.Q0X2mdF-.js";const t="/assets/nexus-store.CAr8pqgn.png",l="/assets/nexus-repo.Ex10LsoE.png",n="/assets/nexus-hosted.DBateX55.png",s="/assets/nexus-proxy.UEOqudZR.png",p="/assets/nexus-group.BEI315ME.png",d="/assets/nexus-user.BR5iP8Ne.png",h="/assets/nexus-realms.CjzjIlL4.png",r="/assets/nexus-publish.85cBqxzm.png",_=JSON.parse('{"title":"前端搭建Nexus私有化仓库—附发布一个简单组件案例","description":"","frontmatter":{},"headers":[],"relativePath":"explore/nexus.md","filePath":"explore/nexus.md","lastUpdated":null}'),c={name:"explore/nexus.md"},u=o(`<h1 id="前端搭建nexus私有化仓库—附发布一个简单组件案例" tabindex="-1">前端搭建Nexus私有化仓库—附发布一个简单组件案例 <a class="header-anchor" href="#前端搭建nexus私有化仓库—附发布一个简单组件案例" aria-label="Permalink to &quot;前端搭建Nexus私有化仓库—附发布一个简单组件案例&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><ol><li>公司网络环境限制，访问公网依赖源可能较慢；</li><li>需要搭建共享组件库，提高团队开发效率；</li><li>高可用和持续集成支持，可以与公司的 <code>CI/CD</code> 工具集成；</li><li>...</li></ol><p>总之帮助多团队多项目的环境中管理和维护大量的内部库和外部依赖。</p><h2 id="搭建过程" tabindex="-1">搭建过程 <a class="header-anchor" href="#搭建过程" aria-label="Permalink to &quot;搭建过程&quot;">​</a></h2><p>以<code>Windows</code>系统搭建<code>Nexus3</code>版本为例。</p><h3 id="步骤1-准备环境" tabindex="-1">步骤1：准备环境 <a class="header-anchor" href="#步骤1-准备环境" aria-label="Permalink to &quot;步骤1：准备环境&quot;">​</a></h3><p><code>Nexus</code> 需要 <code>Java 8</code> 或 <code>Java 11</code> 运行环境。</p><ul><li>安装 <code>Java 8</code>或 <code>Java 11</code>（如果未安装）。</li><li>配置 <code>JAVA_HOME</code> 环境变量，确保指向正确的 <code>Java</code> 安装路径。</li><li>确认 <code>Java</code> 正常安装，通过命令行执行以下命令：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -version</span></span></code></pre></div><p>确保返回的是正确的 <code>Java</code> 版本号。</p><h3 id="步骤2-安装-nexus-repository-manager" tabindex="-1">步骤2：安装 Nexus Repository Manager <a class="header-anchor" href="#步骤2-安装-nexus-repository-manager" aria-label="Permalink to &quot;步骤2：安装 Nexus Repository Manager&quot;">​</a></h3><p><code>Nexus Repository Manager</code> 主要有两个版本可供选择，分别是 <code>Nexus Repository OSS</code>（开源版）和 <code>Nexus Repository Pro</code>（专业版）。您可以根据自己的需求选择其中一个版本进行安装。</p><ol><li>安装地址：<code>https://www.sonatype.com/products/sonatype-nexus-repository</code></li><li>解压文件</li><li><code>bin</code>目录下运行<code>Nexus Repository Manager</code><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nexus-x.x.x/bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nexus.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /run</span></span></code></pre></div></li><li><code>Nexus</code> 默认监听 8081 端口，启动后浏览器访问<code>http://localhost:8081</code> 第一次访问时，会进入管理员登录页面。默认管理员账户和初始密码存储在解压目录的 <code>admin.password</code> 文件中。文件路径通常为： <code>nexus-3.x.x\\sonatype-work\\nexus3\\admin.password</code>，在登录界面重新设定密码之后，这个文件会消失，然后使用新密码登录即可。</li></ol><h3 id="步骤3-配置-nexus-repository-manager" tabindex="-1">步骤3：配置 Nexus Repository Manager <a class="header-anchor" href="#步骤3-配置-nexus-repository-manager" aria-label="Permalink to &quot;步骤3：配置 Nexus Repository Manager&quot;">​</a></h3><h4 id="配置存储空间store" tabindex="-1">配置存储空间Store <a class="header-anchor" href="#配置存储空间store" aria-label="Permalink to &quot;配置存储空间Store&quot;">​</a></h4><p><img src="`+t+'" alt=""> 如果仅作为测试，可以暂时使用默认<code>store</code>。</p><h4 id="创建仓库" tabindex="-1">创建仓库 <a class="header-anchor" href="#创建仓库" aria-label="Permalink to &quot;创建仓库&quot;">​</a></h4><p>仓库分为三种：</p><ul><li><code>hosted</code>（私有仓库）：用于发布个人开发的<code>npm</code>组件；</li><li><code>proxy</code>（代理仓库）：可以代理远程仓库，Nexus 会从远程仓库下载构件，并缓存到本地，这样当后续有用户请求相同的构件时，可以直接从缓存中获取，提升下载速度并减少对外部网络的依赖；</li><li><code>group</code>（组合仓库）：对外公开的仓库，组合了<code>hosted</code>和<code>proxy</code>。 <img src="'+l+'" alt=""></li></ul><ol><li><p>创建hosted <img src="'+n+'" alt=""></p></li><li><p>创建proxy</p></li></ol><p><img src="'+s+'" alt=""> 填入两个必填项，这里以华为云镜像地址为例。</p><ol start="3"><li>创建group</li></ol><p><code>members</code>一栏是起作用的仓库，越靠上优先级越高。 <img src="'+p+'" alt=""></p><h4 id="创建用户-分配权限" tabindex="-1">创建用户，分配权限 <a class="header-anchor" href="#创建用户-分配权限" aria-label="Permalink to &quot;创建用户，分配权限&quot;">​</a></h4><p><img src="'+d+'" alt=""></p><p>如果需要单独创建新的角色，一定要正确分配对应的权限，否则会遇到401鉴权失败提示。 设置身份验证，确保用户只有在拥有有效令牌的情况下才能执行特定操作（如发布包、下载包等）。 <img src="'+h+'" alt=""></p><h2 id="发布私服npm" tabindex="-1">发布私服npm <a class="header-anchor" href="#发布私服npm" aria-label="Permalink to &quot;发布私服npm&quot;">​</a></h2><ol><li>切换到私有库地址<code>hosted</code></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:8081/repository/zhp-hosted/</span></span></code></pre></div><ol start="2"><li>登录</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><p>输入用户名，密码，邮箱。 3. 发布</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre></div><p>发布后可以在<code>nexus</code>仓库中看到： <img src="'+r+'" alt=""></p><h2 id="使用npm包" tabindex="-1">使用npm包 <a class="header-anchor" href="#使用npm包" aria-label="Permalink to &quot;使用npm包&quot;">​</a></h2><ol><li>切换到私有库地址<code>hosted</code></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:8081/repository/zhp-group/</span></span></code></pre></div><ol start="2"><li>登录账号 步骤同上，如果遇到401报错，可能是因为上一个没退出登录 执行<code>logout</code>就好了。</li><li>执行安装</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>原先<code>zhp-proxy</code>没有任何依赖，此时填充了从<code>zhp-proxy</code>对应镜像源下载的依赖。 <img src="'+s+'" alt=""></p>',41),g=[u];function k(b,x,m,y,F,v){return a(),i("div",{"data-pagefind-body":!0},g)}const B=e(c,[["render",k]]);export{_ as __pageData,B as default};
