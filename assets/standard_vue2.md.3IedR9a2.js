import{_ as p,o as e,c as t,a8 as l}from"./chunks/framework.Q0X2mdF-.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"standard/vue2.md","filePath":"standard/vue2.md","lastUpdated":null}'),a={name:"standard/vue2.md"},r=l('<p>几个问题 动态类型语言与静态类型语言的区别</p><p>面向接口编程和面向实现编程的区别</p><p>多态含义 js需要多态吗？ 而 JavaScript 的变量类型在运行期是可变的。一个 JavaScript 对象，既可以表示 Duck 类型的 对象，又可以表示 Chicken 类型的对象，这意味着 JavaScript 对象的多态性是与生俱来的。 这种与生俱来的多态性并不难解释。JavaScript 作为一门动态类型语言，它在编译时没有类型 检查的过程，既没有检查创建的对象类型，又没有检查传递的参数类型。在 1.2.2 节的代码示例中， 我们既可以往 makeSound 函数里传递 duck 对象当作参数，也可以传递 chicken 对象当作参数。 由此可见，某一种动物能否发出叫声，只取决于它有没有 makeSound 方法，而不取决于它是 否是某种类型的对象，这里不存在任何程度上的“类型耦合”。这正是我们从上一节的鸭子类型 中领悟的道理。在 JavaScript 中，并不需要诸如向上转型之类的技术来取得多态的效果。</p><p>更广义的封装 封装不仅仅是 隐藏数据，还包括隐藏实现细节、设计细节以及隐藏对象的类型等。 AOP面向切面编程 将与核心业务逻辑模块无关的功能抽离出来 在js中实现aop，指的是把一个函数动态植入到另一个函数中 Function.prototype.before = function( beforefn ){ var __self = this; // 保存原函数的引用 return function(){ // 返回包含了原函数和新函数的&quot;代理&quot;函数 beforefn.apply( this, arguments ); // 执行新函数，修正 this return __self.apply( this, arguments ); // 执行原函数 } };</p><p>Function.prototype.after = function( afterfn ){ var __self = this; return function(){ var ret = __self.apply( this, arguments ); afterfn.apply( this, arguments ); return ret; } };</p><p>var func = function(){ console.log( 2 ); };</p><p>func = func.before(function(){ console.log( 1 ); }).after(function(){ console.log( 3 ); });</p><p>func(); 使用aop的方式来给函数添加职责，是js中一种巧妙的装饰者模式实现。 设计模式 学习设计模式前需要知道的几个点：</p><ol><li>将不变的部分与变化的部分隔开是每个设计模式的主题 单例模式 定义 保证一个类只有一个实例，并提供一个访问它的全局访问点</li></ol><p>应用 多次点击登录按钮，浮窗弹出，而不管登录按钮点击了多少次，浮窗应该只创建一次 这个在vue开发中也有所体现，比如一个悬浮提示 实现 实现的原则就是用一个变量来标志当前是否已经为某个类创建过对象。如果是，下一次访问该类的实例时，直接返回之前创建的对象。</p><p>比较好的实现方式： 代理方式</p><p>js中的单例模式 js是无类语言，使用字面量方式创建一个对象，它就是唯一的，而且可以被全局访问。但是就全局变量而言，很容易造成命名空间污染。比如变量被覆盖等等 有两种方式可以避免：</p><ol><li>使用命名空间 var namespace1 = { a: function(){ alert (1); }, b: function(){ alert (2); } };</li><li>使用闭包封装私有变量 var user = (function(){ var __name = &#39;sven&#39;, __age = 29; return { getUserInfo: function(){ return __name + &#39;-&#39; + __age; } } })(); 惰性单例 在需要使用到的时候才创建对象</li></ol><p>策略模式 定义 使用一系列的算法，把它们一个个封装起来，并且相互可以替换</p><p>实现 一个基于策略模式的程序至少有两部分组成：</p><ol><li>一组策略类，封装具体的算法，并负责具体的计算过程</li><li>环境类context，接收客户的请求，之后将请求委托给某一个策略类 因此context中要维护对某个策略对象的引用</li></ol><p>js中的实现 var strategies = { &quot;S&quot;: function( salary ){ return salary * 4; }, &quot;A&quot;: function( salary ){ return salary * 3; }, &quot;B&quot;: function( salary ){ return salary * 2; } } var calculateBonus = function( level, salary ){ return strategies<a href="./salary.html"> level </a>; }; console.log( calculateBonus( &#39;S&#39;, 20000 ) ); // 输出：80000 console.log( calculateBonus( &#39;A&#39;, 10000 ) ); // 输出：30000</p><p>这里体现了对象多态性， 。替换 Context 中当前保存的策略对象，便能执行不同的算法来得到我们想要的结果。 结合高阶函数的实现 var S = function( salary ){ return salary * 4; }; var A = function( salary ){ return salary * 3; }; var B = function( salary ){ return salary * 2; }; var calculateBonus = function( func, salary ){ return func( salary ); }; calculateBonus( S, 10000 ); // 输出：40000 在函数作为一等对象的语言中，策略模式是隐形的，strategy就是值为函数的变量 实际上在 JavaScript 这种将函数作为一等对象的语言里，策略模式已经融入到了语言本身 当中，我们经常用高阶函数来封装不同的行为，并且把它传递到另一个函数中。当我们对这些函 数发出“调用”的消息时，不同的函数会返回不同的执行结果。</p><p>因此可以说在js中，函数对象的多态性来的更加简单。 优缺点 优点：  策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。  策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它 们易于切换，易于理解，易于扩展。  策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。  在策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻 便的替代方案。</p><p>缺点： 对于每一个策略strategy都必须了解清楚，违背了最少知识原则。</p><p>代理模式 定义 为一个对象提供一个代用品或者占位符，以便控制对他的访问</p><p>关键 代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身 对象来控制对这个对象的访问，客户实际上访问的是替身对象。替身对象对请求做出一些处理之 后，再把请求转交给本体对象</p><p>保护代理与虚拟代理</p><ol><li><p>虚拟代理 等到合适的情况下，代理再执行操作。 虚拟代理把一些开销很大的对象，延迟到 真正需要它的时候才去创建</p></li><li><p>保护代理 用于控制不同权限的对象对目标对象的访问，但在 JavaScript 并不容易实现保护代 理，因为我们无法判断谁访问了某个对象</p></li></ol><p>代理的意义 符合单一职责原则和开放封闭原则</p><p>案例</p><ol><li>虚拟代理合并请求</li><li>虚拟代理在惰性加载中的应用</li></ol><p>缓存代理 缓存代理在平时的编程中应用的非常多，尤其是结合了高阶函数之后 比如重复的计算结果，重复的异步请求（前提是每次请求的结果是一致的）</p><p>迭代器模式 迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前 的绝大部分语言都内置了迭代器。 定义 迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象 的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即 使不关心对象的内部构造，也可以按顺序访问其中的每个元素。</p><p>内部迭代器和外部迭代器 内部迭代器调用的时候非常方便，外界不用关心迭代器内部的实现，但是此时迭代规则也确定了，不能够更改。相对来说，外部迭代器必须显式地请求迭代下一个元素。他们俩的使用需要看具体场景。 遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p><p>实例 可以改造if else语句相关逻辑 以next-tick.js源码为例！promise-》mutation-》setImmediate</p><p>发布订阅模式 定义 发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状 态发生改变时，所有依赖于它的对象都将得到通知。</p><p>疑问点 发布订阅模式和观察者模式有区别吗？ 比较认同的解释是： 我的理解发布订阅模式和观察者模式本质是一样的，只不过名字不一样。这就好比你小名叫臭臭，身份证叫香香。二者都是为了解决一类共同的问题，都是为了收集注册的回调方法，到该触发的时机去执行。并不是多了个任务中心就不一样了，无非多几行代码的事，把代码再优化优化。就好比webpack执行loader所用的compose 函数，所以它仅仅是一种”代码实现方式”,也可被称为一种模式，因为模式这个东西本身是不存在编程语言中的，通俗地讲，设计模式可以理解为是为了解决具体的需求而出现的一种通用逻辑或者方案。举个例子:因为有疫情，怕接触感染。但我们需要找工作，公司也需要招员工，所以我们出现了线上面试应对这样的需求，而且它适合绝大部分求职者和公司。 所以我们可以把它理解为跟需求相匹配的一种解决问题的方式。二者完全可以认为是解决同一类型问题的方案，本质上没有任何区别！ 所以还是按照书本中所说，发布订阅模式又叫观察者模式，只是我们要看不同的场景进行改动。 必须先订阅再发布吗 不一定，因为受一些不确定的因素影响，比如异步消息返回的比较快，也就是已经发布了信息，但是订阅者还未来得及订阅，特别使用了一些模块化惰性加载的时候，</p><p>为了满足这个需求，我们要建立一个存放离线事件的堆栈，当事件发布的时候，如果此时还没有订阅者来订阅这个事件，我们暂时把发布事件的动作包裹在一个函数里，这些包装函数将被 存入堆栈中，等到终于有对象来订阅此事件的时候，我们将遍历堆栈并且依次执行这些包装函数， 也就是重新发布里面的事件。当然离线事件的生命周期只有一次，就像 QQ 的未读消息只会被重 新阅读一次，所以刚才的操作我们只能进行一次。</p><p>js实现发布订阅模式的便利性</p><ol><li>在js中，可以使用注册回调的形式</li><li>选择推模型（事件发生时，发布者一次性将所有更改的状态和数据都推送给订阅者），使用 Function.prototype.apply 方法把所有参数都推送给订阅者</li></ol><p>发布订阅模式的缺点 创建订阅者本身要消耗一定的时间和内存，而 且当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。另外， 发布—订阅模式虽然可以弱化对象之间的联系，但如果过度使用的话，对象和对象之间的必要联 系也将被深埋在背后，会导致程序难以跟踪维护和理解。特别是有多个发布者和订阅者嵌套到一 起的时候，要跟踪一个 bug 不是件轻松的事情。</p><p>命令模式 定义 命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。 设计模式的主题总是把不变的事物和变化的事物分离开来 而且js可以用高阶函数非常方便地实现命令模式，在js中是一种隐形模式 js中的命令模式 命令模式的由来，其实是回调函数的一个面向对象的替代品 js作为将函数作为一等对象的语言，跟策略模式一样，命令模式也早已融入到js中，因为函数作为一等公民（对象），本身就可以被四处传递，可作为参数传入，可返回。 因此可以使用闭包的方式来实现</p><p>可定义的行为 命令模式的作用不仅是封装运算块，而且可以很方便地给命令对象增加撤销操作。就像订餐 时客人可以通过电话来取消订单一样。 执行（execute）/撤销（） 还可用于ctrl+Z和悔棋的功能，</p><p>撤销和重做 对于不容易直接逆转的操作，像让小球移动到上一个位置这样的行为（撤销），可以记录下当前已经执行过的所有命令，然后重播，从头再执行一遍这些命令。</p><p>实践 实现一个案例，结合策略模式，发布订阅模式，命令模式</p><ol><li>策略模式：一个小球以不同的方式进行移动； 5.4</li><li>命令模式：手动给一个指令，前进或撤销或重置来操作小球，如果点击的过快，也应该执行完上一次再继续执行下一次，而不是直接重新执行，也就是实现一个命令队列；先通过回调来完成下一次出队执行9.6</li><li>发布订阅模式：上一次动画结束之后，notify，通知队列，队列的 update 就是出队第一个元素，且这个元素执行完成后，依旧是通知订阅者。8.4</li></ol><p>需要更改的地方，将当前的目标位置更改为步长</p><p>宏命令 宏命令是一组命令的集合，通过执行宏命令的方式，可以一次执行一批命令。它是命令模式与组合模式的结合。</p><p>智能模式与傻瓜命令 一般来说，命令模式都会在 command 对象中保存一个接收者来负责真正执行客户的请求，这种情况下命令对象是“傻瓜式”的，它只负责把客户的请求转交给接收者来执行，这种模式的好处是请求发起者和请求接收者之间尽可能地得到了解耦。 但是我们也可以定义一些更“聪明”的命令对象，“聪明”的命令对象可以直接实现请求， 这样一来就不再需要接收者的存在，这种“聪明”的命令对象也叫作智能命令。没有接收者的智 能命令，退化到和策略模式非常相近，从代码结构上已经无法分辨它们，能分辨的只有它们意图 的不同。策略模式指向的问题域更小，所有策略对象的目标总是一致的，它们只是达到这个目标 的不同手段，它们的内部实现是针对“算法”而言的。而智能命令模式指向的问题域更广，command 对象解决的目标更具发散性。命令模式还可以完成撤销、排队等功能。</p><p>组合模式 定义 组合模式就是用小的子对象来构建更大的对象，而这些小的子对象本身也许是由更 小的“孙对象”构成的。</p><p>用途 利用对象多态性统一对待组合对象和单个对象，可以忽略组合对象个单个对象的不同，只要都能执行命令就行 更强大的宏命令 基本对象可以被组合成更复杂的组合对象，组合对象又可以被组合，再进行深度优先便可以遍历整棵树，书上的例子又体现了我们可以忽视对象和多个对象的区别，只要保证它们都有execute方法。 这有点像函数式编程中函数组合compose的概念</p><p>js中的组合模式 JavaScript 中实现组合模式的难点在于要保证组合对象和叶对象对象拥有同样的方法，这通常需要用鸭子类型的思想对它们进行 接口检查。 在 JavaScript 中实现组合模式，看起来缺乏一些严谨性，我们的代码算不上安全，但能更快 速和自由地开发，这既是 JavaScript 的缺点，也是它的优点。</p><p>需要注意的地方</p><ol><li>组合模式不是父子关系</li><li>对叶对象操作的一致性 ● 组合对象与叶对象具有相同的接口 ● 对一组叶对象的操作必须具有一致性</li><li>当对象之间的关系并不是严格意义上的层次结构，不适用于使用组合模式</li><li>可以使用职责链模式提高组合模式性能？</li></ol><p>在组合模式中使用职责链 [ ] 一个删除文件夹的例子，结合职责链来实现！</p><p>组合模式的优缺点</p><ol><li><p>优点 ● 表示对象的部分整体层次结构。组合模式可以方便地构造一棵树来表示对象的部分整 体结构。特别是我们在开发期间不确定这棵树到底存在多少层次的时候。在树的构造最 终完成之后，只需要通过请求树的最顶层对象，便能对整棵树做统一的操作。在组合模 式中增加和删除树的节点非常方便，并且符合开放封闭原则。 ● 客户希望统一对待树中的所有对象。组合模式使客户可以忽略组合对象和叶对象的区别， 客户在面对这棵树的时候，不用关心当前正在处理的对象是组合对象还是叶对象，也就 不用写一堆 if、else 语句来分别处理它们。组合对象和叶对象会各自做自己正确的事情， 这是组合模式最重要的能力。</p></li><li><p>缺点 如果系统中的每个对象看起来都和其他对象差不多，区别只有在运行的时候才能体现出来，那么就不适合用组合模式了。</p></li></ol><p>模板方法模式 定义 是一种基于继承的设计模式， 模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。在传统的面向对象语 言中，一个运用了模板方法模式的程序中，子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法里面。而子类的方法具体怎么实现则是可变的，于是我们把这部分变化的逻辑封装到子类中。通过增加新的子类，我们便能给系统增加新的功能，并不需要改 动抽象父类以及其他子类，这也是符合开放封闭原则的。 但在 JavaScript 中，我们很多时候都不需要依样画瓢地去实现一个模版方法模式，高阶函数是更好的选择。</p><p>组成 模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常 在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。 在一个例子中找到哪个是模板方法，模板方法中会封装子类的算法框架。</p><p>抽象类 模板方法模式严重依赖抽象类，js在语言层面上并没有提供对抽象类的支持。 抽象方法被声明在抽象类中，抽象方法并没有具体的实现过程，当子类继承了这个抽象类时，必须重写父类的抽象方法。 js中实现抽象类的缺点：无法保证子类会重写抽象类的方法，解决方案是可以使用鸭子类型判断或者在抽象方法中抛出异常</p><p>使用场景 在 Web 开发中也能找到很多模板方法模式的适用场景，比如我们在构建一系列的 UI 组件， 这些组件的构建过程一般如下所示： (1) 初始化一个 div 容器； (2) 通过 ajax 请求拉取相应的数据； (3) 把数据渲染到 div 容器里面，完成组件的构造； (4) 通知用户组件渲染完毕。</p><p>钩子方法 如果子类有异样的行为时，该如何区分呢？ 钩子方法（hook）可以用来解决这个问题，放置钩子是隔离变化的一种常见手段。我们在父 类中容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要“挂钩”，这由子类自 行决定。钩子方法的返回结果决定了模板方法后面部分的执行步骤，也就是程序接下来的走向</p><p>好莱坞原则 别调用我们，我们会调用你</p><ol><li>模板方法模式</li><li>发布订阅模式</li><li>回调函数 这三个都符合好莱坞原则</li></ol><p>js中真的需要继承吗 JavaScript 语言实际上没有提供真正的类式继承，继承是通过对象与对 象之间的委托来实现的。而模板方法模式是严重依赖于类的概念，所以这里使用js强行实现的模板方法模式并不正宗。</p><p>亨元模式 定义 享元（flyweight）模式是一种用于性能优化的模式，“fly”在这里是苍蝇的意思，意为蝇量 级。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。 如果系统中因为创建了大量类似的对象而导致内存占用过高，享元模式就非常有用了。在 JavaScript 中，浏览器特别是移动端的浏览器分配的内存并不算多，如何节省内存就成了一件非常有意义的事情。</p><p>从后面的例子可以看出，有多少中内部状态的组合，系统中便最多存在多少个共享对象。 而外部状态储存在共享对象的外部，在必要时被传入共享对象来组装成一个完整的对象。</p><p>它是为了解决性能问题而生的问题 内部状态和外部状态 这是亨元模式的构成 ● 内部状态存储于对象内部。 ● 内部状态可以被一些对象共享。 ● 内部状态独立于具体的场景，通常不会改变。 ● 外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享。</p><p>通用结构</p><ol><li>只有当某种共享对象被真正需要时，它才从工厂中被创建出来</li><li>当外部状态非常复杂时，他们与共享对象的联系会变得十分困难，因此将使用一个管理器来记录对象相关的外部状态，使这些外部状态通过某个钩子与共享对象联系起来。</li></ol><p>使用场景</p><ol><li>一个程序中使用了大量的相似对象。</li><li>由于使用了大量对象，造成很大的内存开销。</li><li>对象的大多数状态都可以变为外部状态。</li><li>剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。 文件上传就是一个很适合的例子</li></ol><p>没有内部状态的亨元和没有外部状态的亨元 var Upload = function(){}; var UploadFactory = (function(){ var uploadObj; return { create: function(){ if ( uploadObj ){ return uploadObj; } return uploadObj = new Upload(); } } })(); 生产共享对象的工厂实际上变成了一个单例工厂。</p><p>对象池技术 对象池维 护一个装载空闲对象的池子，如果需要对象的时候，不是直接 new，而是转从对象池里获取。如 果对象池里没有空闲对象，则创建一个新的对象，当获取出的对象完成它的职责之后， 再进入池子等待被下次获取。 很多空间和时间都消耗在了 DOM 节点上，如何避免频繁地创建和删除 DOM 节点就成了一个有意义的话题。</p><p>对象池与亨元模式类似，但它并没有主动分离内部状态和外部状态的过程。</p><p>职责链模式 定义 使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间 的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><p>灵活可拆分的职责链节点 让链中的各个节点可以灵活拆分和重组</p><p>异步的职责链 使用场景是：节点函数中发起一个 ajax异步请求，异步请求返回的结果才能决定是否继续在职责链中 passRequest</p><p>职责链模式的优缺点 优点：</p><ol><li>解耦了请求发送者和n个接受者之间的复杂关系</li><li>链中的节点对象可以灵活地拆分重组。增加或者删除一个节 点，或者改变节点在链中的位置都是轻而易举的事情。</li><li>可以手动指定起始节点</li></ol><p>缺点：</p><ol><li>不能保证某个请求一定会被链中的节点处理。当请求得不到答复时，就会径直从链尾离开，或者抛 出一个错误异常。在这种情况下，我们可以在链尾增加一个保底的接受者节点来处理这种即将离 开链尾的请求。</li><li>职责链模式使得程序中多了一些节点对象，可能在某一次的请求传递过程中，大部分 节点并没有起到实质性的作用，它们的作用仅仅是让请求传递下去，从性能方面考虑，我们要避 免过长的职责链带来的性能损耗。</li></ol><p>用Aop实现职责链 结合AOP，叠加了函数的作用域，虽然把函数叠加在一起，但如果链条太长的话，可能会对性能造成影响。</p><p>应用 无论是作用域链、原型链，还是 DOM 节点中的事件冒泡，我们都能从中找到职责链模式的 影子。职责链模式还可以和组合模式结合在一起，用来连接部件和父部件，或是提高组合对象的 效率。</p><p>中介者模式 定义 中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者对象后，所有的 相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知 中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。使网状的多对多关系变成相对简单的一对多关系。</p><p>案例 当节点对象都是耦合在一块时，一个节点的修改会造成多个节点的修改。改变或者增加任何一个节点对象，都要通知到与其相关的对象。</p><p>最少知识原则 中介者模式符合最少知识原则，是指一个对象应 该尽可能少地了解另外的对象（类似不和陌生人说话）。如果对象之间的耦合性太高，一个对象发生改变之后，难免会影响到其他的对象。</p><p>缺点 系统中要新增一个中介者对象，转移到中介者对象的复杂性</p><p>装饰者模式 定义 动态地给某个对象添加一些额外的职责，而不会影响从这个类中派生的其他对象 并且不改变对象自身，只是在程序运行期间给对象动态地添加职责。</p><p>装饰函数 在不改变函数源代码的情况下，给函数增加功能。普通的用一个变量来保存函数就可以实现，但是要注意this绑定丢失的问题。</p><p>AOP结合装饰者模式</p><ol><li>降低耦合性，两个层面的功能使用AOP进行分离</li><li>aop动态改变函数参数，一个例子就是在axios请求前给请求头加上token参数</li><li>插件式的表单验证，使用before分离了表单验证和表单提交</li></ol><p>tip： 这么做的缺点：这种装饰方式也叠加了函数的作用域，如果装饰的链条过长，性能上也会有一些影响。</p><p>装饰者模式和代理模式 通过例子思考两者的区别</p><p>状态模式 定义 维护内部状态，将内部状态与对应的行为局部化 应用 状态模式对于实际中的应用非常重要，以一个电灯的案例我联想到项目中的排序按钮，先平序，然后增序，最后降序。原来的写法明显违背了开放封闭原则，换做是其他的案例，则根本不知道有多少个状态，当初我的解决办法是加了一个取模，使用状态模式是否更好地解决这个问题呢?是可以的， 先看一下element-plus/table中的处理 <a href="https://github.com/element-plus/element-plus/blob/67037470324a12ec152d219542281d1120941295/packages/components/table/src/table-header/event-helper.ts#L142" target="_blank" rel="noreferrer">https://github.com/element-plus/element-plus/blob/67037470324a12ec152d219542281d1120941295/packages/components/table/src/table-header/event-helper.ts#L142</a> const toggleOrder = ({ order, sortOrders }) =&gt; { if (order === &#39;&#39;) return sortOrders[0] const index = sortOrders.indexOf(order || null) return sortOrders[index &gt; sortOrders.length - 2 ? 0 : index + 1] }</p><p>sortOrders: (&#39;ascending&#39; | &#39;descending&#39; | null)[] 这种处理方式比取模更好，少了取模的计算。</p><p>关键点 把事物的每种状态都封装成单独的类，跟这种状态有关的行为都被封装在这个类的内部，同时还可以把状态的切换规则事先分布在状态类中。好处就是每一种状态和它对应的行为的关系局部化，这些行为被分散和封装在各自对应的状态类中。</p><p>通用的结构 有一个context状态机，维护着所有状态对象</p><p>优缺点 优点：1. 定义了状态与行为之间的关系，并封装在一个类里 2. 避免了context无限膨胀，状态切换的逻辑分布在状态类中 缺点：会在系统中定义许多的类</p><p>性能优化 例子中是为每个context对象都创建了一组state对象，实际上这些state对象之间是可以共享的，使用亨元模式来改写</p><p>策略模式和状态模式的对比 策略模式和状态模式的相同点是，它们都有一个上下文、一些策略或者状态类，上下文把请 求委托给这些类来执行。 它们之间的区别是策略模式中的各个策略类之间是平等又平行的，它们之间没有任何联系， 所以客户必须熟知这些策略类的作用，以便客户可以随时主动切换算法；而在状态模式中，状态 和状态对应的行为是早已被封装好的，状态之间的切换也早被规定完成，“改变行为”这件事情 发生在状态模式内部。对客户来说，并不需要了解这些细节。这正是状态模式的作用所在。</p><p>js中的状态机 使用委托技术，并不需要事先让一个对象持有另一个对象，在js中可以使用call方法直接把请求委托给某个字面量对象来执行。</p><p>适配器模式 定义 解决两个软件实体之间的接口不兼容的问题，别名是包装器</p><p>关键点总结</p><ol><li>是一种亡羊补牢的做法，因为在设计之初并不知道要适配未来的事物</li><li>来自于第三方的api，我们不应该去直接更改他</li></ol><p>和其他设计模式的区别</p><ol><li>和装饰者模式，代理模式，外观模式的区别</li></ol>',103),o=[r];function i(n,s,c,u,f,d){return e(),t("div",{"data-pagefind-body":!0},o)}const m=p(a,[["render",i]]);export{v as __pageData,m as default};
